# Default values for custom-deployment.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# Optional container configurations
# container:
#   command: null
#   args: null
#   workdir: null

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  enabled: true
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  ports:
    - name: http
      containerPort: 80
  labels: {}

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          portName: http

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi


#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  target_cpu_utilization_percentage: 80
  # target_memory_utilization_percentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

container:
# Env variables for the container
  env: []
  command: ""
  entrypoint: null
  args: []

# Docker registry secret
dockerconfigjson: null

# Apolo Storage integration
storageMounts: []
# Example usage:
# storageMounts:
#   - storage_path:
#       path: "storage://my-cluster/my-org/project/data"
#     mount_path:
#       path: "/app/data"
#     mode:
#       mode: "rw"

persistentVolumeClaims: []
# Example usage:
# persistentVolumeClaims:
#   - name: data-pvc
#     size: 5Gi
#     storageClassName: standard
#     accessModes:
#       - ReadWriteOnce

labels:
  application: custom-deployment

# apolo_app_id: <app-uid>

APOLO_PASSED_CONFIG: null

configMap:
  enabled: false
  data: {}
    # key1: value1
    # key2: value2

extraDeployment:
  enabled: false
  image:
    repository: "nginx"
    tag: "latest"
    pullPolicy: IfNotPresent
  # Image pull secrets
  imagePullSecrets: []
  container:
    entrypoint: null
    command: []
    args: []
    env:
      - name: APOLO_PASSED_CONFIG
        value: ""
  securityContext: {}
  replicaCount: 1
  autoscaling:
    enabled: false
  podAnnotations: {}
  podLabels: {}
  labels: {}
  # Pod security context
  podSecurityContext: {}
  # Include main deployment info as environment variables
  includeMainDeploymentInfo: true
  # This is the container command for the deployment
  # Service configuration for extra deployment
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: http
        containerPort: 80
    labels: {}
  # Health checks configuration
  health_checks:
    livenessProbe: null
    # Example:
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 80
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    startupProbe: null
    # Example:
    # startupProbe:
    #   httpGet:
    #     path: /health
    #     port: 80
    #   initialDelaySeconds: 10
    #   periodSeconds: 5
    readinessProbe: null
    # Example:
    # readinessProbe:
    #   httpGet:
    #     path: /ready
    #     port: 80
    #   initialDelaySeconds: 5
    #   periodSeconds: 5
  # Resource limits and requests
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  # Volume mounts
  volumeMounts: []
  # - name: config-volume
  #   mountPath: /etc/config
  #   readOnly: true
  # Volumes
  volumes: []
  # - name: config-volume
  #   configMap:
  #     name: my-config
  # Init containers
  initContainers: []
  # - name: init-container
  #   image: busybox
  #   command: ['sh', '-c', 'echo init']
  # Node selector
  nodeSelector: {}
  # Affinity rules
  affinity: {}
  # Tolerations
  tolerations: []
  # Docker config for private registries
  dockerconfigjson: null
  configMap:
    enabled: false
    data: {}
      # key1: value1
      # key2: value2

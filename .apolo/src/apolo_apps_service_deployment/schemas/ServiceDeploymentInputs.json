{
  "$defs": {
    "ApoloFilesMount": {
      "properties": {
        "storage_uri": {
          "$ref": "#/$defs/ApoloFilesPath"
        },
        "mount_path": {
          "$ref": "#/$defs/MountPath"
        },
        "mode": {
          "$ref": "#/$defs/ApoloMountMode",
          "default": {
            "mode": "rw"
          }
        }
      },
      "required": [
        "storage_uri",
        "mount_path"
      ],
      "title": "ApoloFilesMount",
      "type": "object",
      "x-description": "Configure Apolo Files mount within the application workloads.",
      "x-is-advanced-field": false,
      "x-meta-type": "integration",
      "x-title": "Apolo Files Mount"
    },
    "ApoloFilesPath": {
      "properties": {
        "path": {
          "title": "Path",
          "type": "string",
          "x-description": "Provide the Apolo Storage path starting with `storage:` to locate your files.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Storage Path"
        }
      },
      "required": [
        "path"
      ],
      "title": "ApoloFilesPath",
      "type": "object",
      "x-description": "Specify the path within the Apolo Files application to read from or write to.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Apolo Files Path"
    },
    "ApoloMountMode": {
      "properties": {
        "mode": {
          "$ref": "#/$defs/ApoloMountModes",
          "default": "rw",
          "x-description": "Select the access mode for the mount, such as read-only or read-write.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Mount Mode"
        }
      },
      "title": "ApoloMountMode",
      "type": "object",
      "x-description": "Configure how Apolo Files should be mounted into the application\u2019s workload environment.",
      "x-is-advanced-field": false,
      "x-meta-type": "integration",
      "x-title": "Apolo Files Mount"
    },
    "ApoloMountModes": {
      "enum": [
        "r",
        "rw"
      ],
      "title": "ApoloMountModes",
      "type": "string"
    },
    "ApoloSecret": {
      "properties": {
        "key": {
          "title": "Key",
          "type": "string"
        }
      },
      "required": [
        "key"
      ],
      "title": "ApoloSecret",
      "type": "object",
      "x-description": "Apolo Secret Configuration.",
      "x-is-advanced-field": false,
      "x-meta-type": "integration",
      "x-title": "Secret"
    },
    "AutoscalingHPA": {
      "properties": {
        "min_replicas": {
          "default": 1,
          "minimum": 0,
          "title": "Min Replicas",
          "type": "integer",
          "x-description": "Set the minimum number of replicas for your deployment.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Minimum Replicas"
        },
        "max_replicas": {
          "default": 5,
          "exclusiveMinimum": 0,
          "title": "Max Replicas",
          "type": "integer",
          "x-description": "Limit the maximum number of replicas for your deployment.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Maximum Replicas"
        },
        "target_cpu_utilization_percentage": {
          "default": 80,
          "exclusiveMinimum": 0,
          "maximum": 100,
          "title": "Target Cpu Utilization Percentage",
          "type": "integer",
          "x-description": "Choose target CPU utilization percentage for autoscaling.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Target CPU Utilization Percentage"
        },
        "target_memory_utilization_percentage": {
          "anyOf": [
            {
              "exclusiveMinimum": 0,
              "maximum": 100,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Target Memory Utilization Percentage",
          "x-description": "Choose target memory utilization percentage for autoscaling.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Target Memory Utilization Percentage"
        }
      },
      "title": "AutoscalingHPA",
      "type": "object",
      "x-description": "Autoscaling configuration for Horizontal Pod Autoscaler.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Autoscaling HPA"
    },
    "ConfigMap": {
      "properties": {
        "mount_path": {
          "$ref": "#/$defs/MountPath",
          "x-description": "The path where the key-value pairs will be mounted in the container."
        },
        "data": {
          "items": {
            "$ref": "#/$defs/ConfigMapKeyValue"
          },
          "title": "Data",
          "type": "array"
        }
      },
      "required": [
        "mount_path",
        "data"
      ],
      "title": "ConfigMap",
      "type": "object",
      "x-description": "Store non-sensitive configuration data in key-value format that can be mounted into the application as files.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Mount Configuration Data"
    },
    "ConfigMapKeyValue": {
      "properties": {
        "key": {
          "title": "Key",
          "type": "string",
          "x-description": "The key for the entry. It will be used as a file name in the mounted directory.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Key"
        },
        "value": {
          "title": "Value",
          "type": "string",
          "x-description": "The value associated with the key.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Value"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "title": "ConfigMapKeyValue",
      "type": "object",
      "x-description": "Define a key-value pair. Each key will be a file in the mounted directory.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Key-Value Pair"
    },
    "Container": {
      "properties": {
        "command": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Command",
          "x-description": "Override the container's default entrypoint by specifying a custom command.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Container Command"
        },
        "args": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Args",
          "x-description": "Provide arguments to pass to the container's entrypoint or command.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Container Arguments"
        },
        "env": {
          "items": {
            "$ref": "#/$defs/Env"
          },
          "title": "Env",
          "type": "array",
          "x-description": "Define environment variables to inject into the container.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Environment Variables"
        }
      },
      "title": "Container",
      "type": "object",
      "x-description": "Define command, arguments, and environment variables for the Kubernetes container.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Container Configuration"
    },
    "ContainerImage": {
      "properties": {
        "repository": {
          "title": "Repository",
          "type": "string",
          "x-description": "Choose a repository for the container image.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Container Image Repository"
        },
        "tag": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Tag",
          "x-description": "Choose a tag for the container image.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Container Image Tag"
        },
        "dockerconfigjson": {
          "anyOf": [
            {
              "$ref": "#/$defs/DockerConfigModel"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "x-description": "ImagePullSecrets for DockerHub",
          "x-is-advanced-field": false,
          "x-meta-type": "integration",
          "x-title": "ImagePullSecrets for DockerHub"
        },
        "pull_policy": {
          "$ref": "#/$defs/ContainerImagePullPolicy",
          "default": "IfNotPresent",
          "x-description": "Specify the pull policy for the container image.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Container Image Pull Policy"
        }
      },
      "required": [
        "repository"
      ],
      "title": "ContainerImage",
      "type": "object",
      "x-description": "Container image to be used in application",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Container Image"
    },
    "ContainerImagePullPolicy": {
      "enum": [
        "Always",
        "Never",
        "IfNotPresent"
      ],
      "title": "ContainerImagePullPolicy",
      "type": "string"
    },
    "DockerConfigModel": {
      "properties": {
        "filecontents": {
          "title": "Filecontents",
          "type": "string",
          "x-description": "The contents of the Docker config file.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Docker Config File Contents"
        }
      },
      "required": [
        "filecontents"
      ],
      "title": "DockerConfigModel",
      "type": "object",
      "x-description": "Docker configuration content.",
      "x-is-advanced-field": false,
      "x-meta-type": "integration",
      "x-title": "Docker Config"
    },
    "Env": {
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "x-description": "Specify the name of the environment variable to inject into the container.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Variable Name"
        },
        "value": {
          "anyOf": [
            {
              "type": "string",
              "x-description": "Specify the value of the environment variable.",
              "x-is-advanced-field": false,
              "x-meta-type": "inline",
              "x-title": "String variable Value"
            },
            {
              "$ref": "#/$defs/ApoloSecret"
            }
          ],
          "default": "",
          "title": "Value",
          "x-description": "Specify the value of the environment variable.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Variable Value"
        }
      },
      "required": [
        "name"
      ],
      "title": "Env",
      "type": "object",
      "x-description": "K8S container env var.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Env"
    },
    "ExecHealthCheckConfig": {
      "description": "Exec-specific health check configuration.",
      "properties": {
        "probe_type": {
          "const": "Exec",
          "default": "Exec",
          "title": "Probe Type",
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "title": "Command",
          "type": "array",
          "x-description": "Command to execute for the health check",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Command"
        }
      },
      "required": [
        "command"
      ],
      "title": "ExecHealthCheckConfig",
      "type": "object",
      "x-description": "Configuration for exec health checks.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Exec Health Check"
    },
    "GRPCHealthCheckConfig": {
      "description": "gRPC-specific health check configuration.",
      "properties": {
        "port": {
          "default": 8080,
          "exclusiveMinimum": 0,
          "title": "Port",
          "type": "integer",
          "x-description": "Port to make a connection for the Custom Deployment instance",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Port"
        },
        "probe_type": {
          "const": "gRPC",
          "default": "gRPC",
          "title": "Probe Type",
          "type": "string"
        },
        "service": {
          "title": "Service",
          "type": "string",
          "x-description": "The name of the gRPC service to probe",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Service"
        }
      },
      "required": [
        "service"
      ],
      "title": "GRPCHealthCheckConfig",
      "type": "object",
      "x-description": "Configuration for gRPC health checks.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "gRPC Health Check"
    },
    "HTTPHealthCheckConfig": {
      "description": "HTTP-specific health check configuration.",
      "properties": {
        "port": {
          "default": 8080,
          "exclusiveMinimum": 0,
          "title": "Port",
          "type": "integer",
          "x-description": "Port to make a connection for the Custom Deployment instance",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Port"
        },
        "probe_type": {
          "const": "HTTP",
          "default": "HTTP",
          "title": "Probe Type",
          "type": "string"
        },
        "path": {
          "title": "Path",
          "type": "string",
          "x-description": "Path to access on the HTTP server",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Path"
        },
        "http_headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Http Headers",
          "x-description": "Custom headers to set in the request",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "HTTP Headers"
        }
      },
      "required": [
        "path"
      ],
      "title": "HTTPHealthCheckConfig",
      "type": "object",
      "x-description": "Configuration for HTTP health checks.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "HTTP Health Check"
    },
    "HealthCheck": {
      "properties": {
        "initial_delay": {
          "default": 0,
          "maximum": 240,
          "minimum": 0,
          "title": "Initial Delay",
          "type": "integer",
          "x-description": "Number of seconds after the container has started before performing the first probe",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Initial Delay"
        },
        "period": {
          "default": 10,
          "maximum": 240,
          "minimum": 1,
          "title": "Period",
          "type": "integer",
          "x-description": "Number of seconds to wait between starting a probe attempt",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Period"
        },
        "failure_threshold": {
          "default": 3,
          "title": "Failure Threshold",
          "type": "integer",
          "x-description": "Number of times to retry the probe before marking the container as Unready",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Failure Threshold"
        },
        "timeout": {
          "default": 1,
          "maximum": 240,
          "minimum": 1,
          "title": "Timeout",
          "type": "integer",
          "x-description": "Number of seconds after which the probe times out",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Timeout"
        },
        "health_check_config": {
          "anyOf": [
            {
              "$ref": "#/$defs/HTTPHealthCheckConfig"
            },
            {
              "$ref": "#/$defs/GRPCHealthCheckConfig"
            },
            {
              "$ref": "#/$defs/TCPHealthCheckConfig"
            },
            {
              "$ref": "#/$defs/ExecHealthCheckConfig"
            }
          ],
          "title": "Health Check Config"
        }
      },
      "required": [
        "health_check_config"
      ],
      "title": "HealthCheck",
      "type": "object",
      "x-description": "Configuration for health checks on the application.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Health Check"
    },
    "HealthCheckProbesConfig": {
      "description": "Configuration for health check probes.",
      "properties": {
        "startup": {
          "anyOf": [
            {
              "$ref": "#/$defs/HealthCheck"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "x-description": "Configuration for startup probe",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Startup Probe"
        },
        "liveness": {
          "anyOf": [
            {
              "$ref": "#/$defs/HealthCheck"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "x-description": "Configuration for liveness probe",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Liveness Probe"
        },
        "readiness": {
          "anyOf": [
            {
              "$ref": "#/$defs/HealthCheck"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "x-description": "Configuration for liveness probe",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Readiness Probe"
        }
      },
      "title": "HealthCheckProbesConfig",
      "type": "object",
      "x-description": "Configuration for health check probes.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Health Check Probes"
    },
    "IngressHttp": {
      "properties": {
        "auth": {
          "default": true,
          "title": "Auth",
          "type": "boolean",
          "x-description": "Require authenticated user credentials with appropriate permissions for all incoming HTTPS requests to the application.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Enable Authentication and Authorization"
        }
      },
      "title": "IngressHttp",
      "type": "object",
      "x-description": "Enable access to your application over the internet using HTTPS.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Enable HTTP Ingress"
    },
    "IngressPathTypeEnum": {
      "enum": [
        "Prefix",
        "Exact",
        "ImplementationSpecific"
      ],
      "title": "IngressPathTypeEnum",
      "type": "string"
    },
    "MountPath": {
      "properties": {
        "path": {
          "title": "Path",
          "type": "string",
          "x-description": "Specify the absolute path inside the container where the volume should be mounted.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Path"
        }
      },
      "required": [
        "path"
      ],
      "title": "MountPath",
      "type": "object",
      "x-description": "Specify the absolute path.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Mount Path"
    },
    "NetworkingConfig": {
      "properties": {
        "service_enabled": {
          "default": true,
          "title": "Service Enabled",
          "type": "boolean",
          "x-description": "Enable or disable the internal network service for the deployment.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Service Enabled"
        },
        "ingress_http": {
          "anyOf": [
            {
              "$ref": "#/$defs/IngressHttp"
            },
            {
              "type": "null"
            }
          ],
          "x-description": "Define HTTP ingress configuration for exposing services over the web.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "HTTP Ingress"
        },
        "ports": {
          "items": {
            "$ref": "#/$defs/Port"
          },
          "title": "Ports",
          "type": "array",
          "x-description": "Specify which ports should be exposed by the application.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Exposed Ports"
        }
      },
      "title": "NetworkingConfig",
      "type": "object",
      "x-description": "Configure custom networking options for your deployment, including ports and ingress settings.",
      "x-is-advanced-field": true,
      "x-meta-type": "inline",
      "x-title": "Network Configuration"
    },
    "Port": {
      "properties": {
        "name": {
          "default": "http",
          "title": "Name",
          "type": "string",
          "x-description": "Specify a name for the HTTP port (e.g., 'http', 'grpc') to identify it in the service.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "HTTP Port Name"
        },
        "port": {
          "default": 80,
          "exclusiveMinimum": 0,
          "title": "Port",
          "type": "integer",
          "x-description": "Set the HTTP port number that will be exposed from the container. Please note: platform currently does not allow to expose multiple ports for a single app on a single domain name. Please reach us describing your use-case if you need it.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "HTTP Port"
        },
        "path_type": {
          "$ref": "#/$defs/IngressPathTypeEnum",
          "default": "Prefix",
          "x-description": "Define how the path should be matched (e.g., 'Prefix' or 'Exact').",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Path Type"
        },
        "path": {
          "default": "/",
          "title": "Path",
          "type": "string",
          "x-description": "Set the URL path for routing traffic to this port.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Path"
        }
      },
      "title": "Port",
      "type": "object",
      "x-description": "",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": ""
    },
    "Preset": {
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "x-description": "The name of the preset.",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Resource Preset"
        }
      },
      "required": [
        "name"
      ],
      "title": "Preset",
      "type": "object",
      "x-description": "Select the resource preset used per service replica.",
      "x-is-advanced-field": false,
      "x-meta-type": "integration",
      "x-title": "Resource Preset"
    },
    "StorageMounts": {
      "properties": {
        "mounts": {
          "description": "List of ApoloStorageMount objects to mount external storage paths",
          "items": {
            "$ref": "#/$defs/ApoloFilesMount"
          },
          "title": "Mounts",
          "type": "array"
        }
      },
      "title": "StorageMounts",
      "type": "object",
      "x-description": "Mount external storage paths",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "Storage Mounts"
    },
    "TCPHealthCheckConfig": {
      "description": "TCP-specific health check configuration.",
      "properties": {
        "port": {
          "default": 8080,
          "exclusiveMinimum": 0,
          "title": "Port",
          "type": "integer",
          "x-description": "Port to make a connection for the Custom Deployment instance",
          "x-is-advanced-field": false,
          "x-meta-type": "inline",
          "x-title": "Port"
        },
        "probe_type": {
          "const": "TCP",
          "default": "TCP",
          "title": "Probe Type",
          "type": "string"
        }
      },
      "title": "TCPHealthCheckConfig",
      "type": "object",
      "x-description": "Configuration for TCP health checks.",
      "x-is-advanced-field": false,
      "x-meta-type": "inline",
      "x-title": "TCP Health Check"
    }
  },
  "properties": {
    "preset": {
      "$ref": "#/$defs/Preset"
    },
    "image": {
      "$ref": "#/$defs/ContainerImage"
    },
    "autoscaling": {
      "anyOf": [
        {
          "$ref": "#/$defs/AutoscalingHPA"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "x-description": "Enable Autoscaling and configure it.",
      "x-is-advanced-field": true,
      "x-meta-type": "inline",
      "x-title": "Autoscaling"
    },
    "container": {
      "anyOf": [
        {
          "$ref": "#/$defs/Container"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "x-description": "Enable Container configuration.",
      "x-is-advanced-field": true,
      "x-meta-type": "inline",
      "x-title": "Container"
    },
    "config_map": {
      "anyOf": [
        {
          "$ref": "#/$defs/ConfigMap"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "storage_mounts": {
      "anyOf": [
        {
          "$ref": "#/$defs/StorageMounts"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "x-description": "Enable Storage mounts configuration.",
      "x-is-advanced-field": true,
      "x-meta-type": "inline",
      "x-title": "Storage Mounts"
    },
    "networking": {
      "$ref": "#/$defs/NetworkingConfig"
    },
    "health_checks": {
      "anyOf": [
        {
          "$ref": "#/$defs/HealthCheckProbesConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    }
  },
  "required": [
    "preset",
    "image"
  ],
  "title": "ServiceDeploymentInputs",
  "type": "object",
  "x-description": "Configuration for Custom Deployment.",
  "x-is-advanced-field": false,
  "x-meta-type": "inline",
  "x-title": "Custom Deployment"
}
